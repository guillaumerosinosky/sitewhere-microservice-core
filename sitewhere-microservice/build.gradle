description = 'SiteWhere Common Microservice Library'

apply plugin: 'java-library'
dependencies {
	// SiteWhere model/API.
	api group: 'com.sitewhere', name: 'sitewhere-k8s-model', version: "${rootProject.ext['sitewhere.k8s.api.version']}"
    api group: 'com.sitewhere', name: 'sitewhere-grpc-kafka', version: "${rootProject.ext['sitewhere.grpc.api.version']}"
    api group: 'com.sitewhere', name: 'sitewhere-grpc-common', version: "${rootProject.ext['sitewhere.grpc.api.version']}"
        
    // SLF4J Extension for i18n.
    api group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.30'
    api group: 'ch.qos.cal10n', name: 'cal10n-api', version: '0.8.1'    
    
    // Google Guice for configuration management.
    api group: 'com.google.inject', name: 'guice', version: '5.0.1'
        
    // Geolocation classes made available to scripts.
    api group: 'com.vividsolutions', name: 'jts', version:'1.13'
    
    // Lettuce Redis client.
    api group: 'io.lettuce', name: 'lettuce-core'
    
    // Jackson JSON processing.
    api group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'       
    
    // Shared utilities.
    api group: 'org.apache.commons', name: 'commons-lang3'
    api group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    api group: 'joda-time', name: 'joda-time', version:'2.9.1'
    
    // Kafka streams.
    api group: 'org.apache.kafka', name: 'kafka-streams'
    
    // Keycloak
    api group: 'org.keycloak', name: 'keycloak-admin-client', version: '11.0.3'
       
    // Metrics support
    api group: 'io.prometheus', name: 'simpleclient', version:'0.10.0'
    api group: 'io.prometheus', name: 'simpleclient_httpserver', version:'0.10.0'
    
    // Retry logic.
    api "com.evanlennick:retry4j:0.15.0"
    
    // JSON web token support.
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.7.0'
	
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'build.timestamp': new java.text.SimpleDateFormat('yyyyMMddHHmmss').format(new Date()),
            'version.identifier' : project.version,
            'git.revision': rootProject.ext['git.revision'],
            'git.revision.abbrev': rootProject.ext['git.revision.abbrev']
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

// Publish jar.	
apply plugin: 'maven-publish'
publishing {
	publications {
		mavenJava(MavenPublication) {
		    from components.java
            artifact sourcesJar
            artifact javadocJar
			pom {
			    name = 'SiteWhere Microservice Components'
			    description = 'SiteWhere Microservice Components Library'
			    url = 'http://sitewhere.io'
			    licenses {
			        license {
			            name = 'CPAL-1.0'
			            url = 'https://opensource.org/licenses/CPAL-1.0'
			        }
			    }
                developers {
                    developer {
                        id = 'admin'
                        name = 'SiteWhere Admin'
                        email = 'admin@sitewhere.com'
                    }
                }
                scm {
                    connection = 'https://github.com/sitewhere/sitewhere-microservice-core.git'
                    url = 'https://github.com/sitewhere/sitewhere-microservice-core'
                }
			}	
		}
	}
    repositories {
        maven {
            url project.nexusUrl
            credentials {
                username project.nexusUsername
                password project.nexusPassword
            }
        }
    }
}

if (project.hasProperty("signing.keyId")) {
	apply plugin: 'signing'
	signing {
	    sign publishing.publications.mavenJava
	}
}